import yfinance as yf
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from scipy.stats import levy

stocks = ['ABBV', 'WMT', 'FMCB']
means = []

# Calculate means for the stocks
for ticker in stocks:
    data = yf.Ticker(ticker)
    price_data = data.history(period='10y')['Close']
    daily_returns = price_data.pct_change().dropna()
    means.append(daily_returns.mean())

weights = []
for mean in means:
    weights.append(mean/sum(means))

# Calculate portfolio mean and standard deviation
port_mean = sum(np.array(weights)*np.array(means))
port_sd = sum(np.array(weights)*daily_returns.std())

# Set up a figure
plt.figure(figsize=(10, 6))

# Number of Monte Carlo simulations and days
num_simulations = 1000
days = 2520  # Number of trading days in the simulation (about 10 years)

# Plot the paths for each simulation
'''
for i in range(num_simulations):
    samples = np.random.normal(port_mean, port_sd, size=days)  # Simulate daily returns
    portfolio_values = 1000 * (1 + samples).cumprod()  # Portfolio value starting from 1000
    plt.plot(portfolio_values, color='b', alpha=0.1)  # Plot individual path with transparency
'''

for i in range(num_simulations):
    samples = levy.rvs(loc = port_mean, scale = 1, size=days)  # Simulate daily returns
    portfolio_values = 1000 * (1 + samples).cumprod()  # Portfolio value starting from 1000
    plt.plot(portfolio_values, color='b', alpha=0.1)  # Plot individual path with transparency

# Add titles and labels
plt.title('Monte Carlo Simulation - Portfolio Value Paths')
plt.xlabel('Days')
plt.ylabel('Portfolio Value')
plt.grid(True)

# Show the plot
plt.show()
